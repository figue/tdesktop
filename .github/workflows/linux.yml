name: Linux.

on:
  release:
    types: [published]
  repository_dispatch:
    types: ["Restart linux workflow."]
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/linux.yml'
      - 'snap/**'
      - 'Telegram/build/**'
      - 'Telegram/Patches/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.bat'
      - 'Telegram/Telegram.plist'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/linux.yml'
      - 'snap/**'
      - 'Telegram/build/**'
      - 'Telegram/Patches/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/mac/**'
      - 'Telegram/Telegram/**'
      - 'Telegram/configure.bat'
      - 'Telegram/Telegram.plist'

jobs:

  linux:
    name: CentOS 7
    runs-on: ubuntu-latest
    container:
      image: docker.pkg.github.com/telegramdesktop/tdesktop/centos_env
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    defaults:
      run:
        shell: scl enable devtoolset-9 -- bash --noprofile --norc -eo pipefail {0}

    strategy:
      matrix:
        defines:
          - ""

    env:
      UPLOAD_ARTIFACT: "true"

    steps:
      - name: Get repository name.
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone.
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up.
        run: |
          gcc --version
          ln -s $LibrariesPath Libraries

          yum -y install epel-release
          yum -y install wget p7zip

          cd $REPO_NAME
          cd ..

          mkdir DesktopPrivate
          cd DesktopPrivate

          echo "#pragma once" > alpha_private.h
          echo "#pragma once" > packer_private.h

          echo '${{ secrets.ALPHA_PRIVATE }}' >> alpha_private.h
          echo '${{ secrets.PACKER_PRIVATE }}' >> packer_private.h

          cd ..

          wget ${{ secrets.PACK_FILE }} -O p.7z
          7za x p.7z -p${{ secrets.PACK_FILE_PASSWORD }}

      - name: Telegram Desktop build.
        run: |
          cd $REPO_NAME/Telegram

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo Define from matrix: $DEFINE
            echo "ARTIFACT_NAME=Telegram_${{ matrix.defines }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=Telegram" >> $GITHUB_ENV
          fi

          ./configure.sh \
          -D CMAKE_EXE_LINKER_FLAGS="-s" \
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} \
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }} \
          -D DESKTOP_APP_SPECIAL_TARGET=linux \
          -D DESKTOP_APP_USE_PACKAGED=OFF \
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF \
          $DEFINE

          cd ../out/Release
          make -j$(nproc)

      - name: Check.
        run: |
          filePath="$REPO_NAME/out/Release/Release/Telegram"
          if test -f "$filePath"; then
            echo "Build successfully done! :)"

            size=$(stat -c %s "$filePath")
            echo "File size of ${filePath}: ${size} Bytes."
          else
            echo "Build error, output file does not exist."
            exit 1
          fi

      - name: Compress.
        if: (github.event_name == 'release')
        run: |
          filePath="$REPO_NAME/out/Release/Release/Telegram"
          cp $filePath .
          tar -cJvf Telegram.tar.xz Telegram

      - name: Deploy.
        if: (github.event_name == 'release')
        run: |
          bash ci_start.sh &> /dev/null

      - name: Upload.
        if: (github.event_name == 'release')
        uses: lovasoa/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./Telegram.tar.xz
          asset_label: "Linux 64 bit: Binary"
          asset_name: Telegram.tar.xz
          asset_content_type: application/x-gzip
